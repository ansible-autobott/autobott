---
#============================================================================================================
# Borgmatic Backup
#============================================================================================================

- name: Main Borgmatic block
  tags:
    - borgmatic
    - untagged
  when:
    - run_role_borgmatic is defined
    - run_role_borgmatic
  block:
    - name: Set merged borgmatic configuration
      ansible.builtin.set_fact:
        borgmatic_config: "{{ borgmatic_defaults | combine(borgmatic, recursive=true) }}"

    - name: Install system dependencies for python3-venv and pip
      ansible.builtin.apt:
        name:
          - python3-venv
          - python3-pip
        state: present
        update_cache: true

    - name: Get current Python 3 version
      ansible.builtin.shell: "python3 -c 'import sys; print(\".\".join(map(str, sys.version_info[:3])))'"
      register: py3_version
      changed_when: false

    - name: Check if Python venv exists
      ansible.builtin.stat:
        path: "{{ borgmatic_config.base_dir }}/py3_venv/{{ py3_version.stdout }}/bin/python"
      register: borgmatic_venv

    - name: Remove old venvs if current one does not exist
      ansible.builtin.file:
        path: "{{ borgmatic_config.base_dir }}/py3_venv"
        state: absent
      when: not borgmatic_venv.stat.exists

    - name: Create Python3 virtualenv and install borgmatic
      ansible.builtin.pip:
        name: borgmatic
        version: "{{ borgmatic_config.version }}"
        virtualenv: "{{ borgmatic_config.base_dir }}/py3_venv/{{ py3_version.stdout }}"
        virtualenv_command: /usr/bin/python3 -m venv

    - name: Create borgmatic wrapper script in /usr/local/bin
      ansible.builtin.copy:
        dest: /usr/local/bin/borgmatic
        content: |
          #!/bin/bash
          exec {{ borgmatic_config.base_dir }}/py3_venv/{{ py3_version.stdout }}/bin/borgmatic "$@"
        mode: "0755"

    - name: Ensure borgmatic directories exits
      ansible.builtin.file:
        path: /etc/borgmatic.d
        state: directory
        mode: "0755"
        owner: root
        group: root

    - name: Create SSH private key file for borgmatic
      ansible.builtin.copy:
        content: "{{ item.ssh_key }}"
        dest: "/etc/borgmatic.d/{{ item.name }}.pkey"
        mode: "0600"
        owner: root
        group: root
      no_log: true
      loop: "{{ borgmatic_backups }}"
      when:
        - item.enabled | default(true)
        - item.ssh_key is defined
        - item.ssh_key | length > 0

    - name: Get Borg version
      command: borg --version
      register: borg_version_output
      changed_when: false

    - name: Extract Borg major version
      set_fact:
        borg_major_version: "{{ borg_version_output.stdout.split()[1].split('.')[0] }}"

    - name: Generate borgmatic configs for each backup job
      ansible.builtin.template:
        src: backup.yaml
        dest: "/etc/borgmatic.d/{{ item.name }}.yaml"
        mode: "0600"
      no_log: true
      loop: "{{ borgmatic_backups }}"
      when: item.enabled | default(true)

    - name: Remove disabled and removed borgmatic configs
      block:

        - name: Remove disabled borgmatic configs
          file:
            path:         "/etc/borgmatic.d/{{ item.name }}.yaml"
            state:        absent
          loop: "{{ borgmatic_backups }}"
          when: not item.enabled | default(true)
          no_log: true

        - name: Find existing borgmatic configs
          ansible.builtin.find:
            paths: /etc/borgmatic.d
            patterns:
              - "*.yaml"
              - "*.pkey"
          register: borgmatic_existing

        - name: Build expected borgmatic files for enabled backups
          set_fact:
            expected_files: >-
              {{
                borgmatic_backups
                 | selectattr('enabled','defined') | selectattr('enabled')
                 | map(attribute='name')
                 | map('string')  | map('regex_replace', '^', '/etc/borgmatic.d/') | map('regex_replace', '$', '.yaml')
                 | list
                 +
                 borgmatic_backups
                 | selectattr('enabled','defined') | selectattr('enabled')
                 | map(attribute='name')
                 | map('string')  | map('regex_replace', '^', '/etc/borgmatic.d/') | map('regex_replace', '$', '.pkey')
                 | list
               }}

        - name: Remove deleted borgmatic configs
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop: "{{ (borgmatic_existing.files | map(attribute='path') | list) | difference(expected_files) }}"

    - name: Validate rendered borgmatic config
      command: borgmatic config validate
      register: borgmatic_validation
      changed_when: false
      failed_when: borgmatic_validation.rc != 0

    #============================================================================================================
    # init
    #============================================================================================================

    - name: Ensure facts directory exists
      file:
        path: /etc/ansible/facts.d
        state: directory
        mode: '0755'

    - name: Check if remote fact file exists
      stat:
        path: /etc/ansible/facts.d/borgmatic_repos_init.fact
      register: borgmatic_repos_init_fact

    - name: Initialize local fact if missing
      copy:
        dest: /etc/ansible/facts.d/borgmatic_repos_init.fact
        content: '{"repos": []}'
        mode: '0640'
      when: not borgmatic_repos_init_fact.stat.exists

    - name: Read borgmatic fact
      slurp:
        src: /etc/ansible/facts.d/borgmatic_repos_init.fact
      register: fact_raw

    - name: Parse current items
      set_fact:
        init_repos: "{{ fact_raw.content | b64decode | from_json }}"

    - name: ensure correct known hosts
      block:

        - name: Extract SSH hosts from destination paths
          set_fact:
            borg_ssh_hosts: "{{ borg_ssh_hosts | default([]) + [(_host_match | default(''))] }}"
          vars:
            _host_match: "{{ item.1.path | regex_search('^ssh://[^@]+@([^:/]+)', '\\1') if item.1.path is match('^ssh://[^@]+@[^:/]+') else None }}"
          when:
            - item.0.enabled | default(true)
            - item.1.path is defined
            - _host_match is not none
          with_subelements:
            - "{{ borgmatic_backups }}"
            - destination
          no_log: true

        - name: Remove duplicate hosts
          set_fact:
            borg_ssh_hosts: "{{ borg_ssh_hosts | unique }}"
          when: borg_ssh_hosts is defined

        - name: add ssh hosts to _known_host
          include_tasks: scan_and_add_known_host.yaml
          loop: "{{ borg_ssh_hosts | flatten | select('match', '^[^\\s]+$') | list }}"
          loop_control:
            loop_var: item
          when: borg_ssh_hosts is defined

    - name: Init Borg backup targets
      ansible.builtin.include_tasks: init_borg_target.yaml
      loop: "{{ borgmatic_backups }}"
      when: (item.enabled | default(false)) | bool
      no_log: true

    #============================================================================================================
    # Schedule
    #============================================================================================================
    - name: Enable daily cron job for borgmatic profile
      template:
        src: run_in_cron.sh
        dest: "/etc/cron.daily/borgmatic_profile_{{ item.name }}.sh"
        mode: '0755'
        owner: root
        group: root
      no_log: true
      loop: "{{ borgmatic_backups }}"
      when:
        - item.schedule is defined
        - item.schedule == "daily"
        - item.enabled

    - name: Disable daily cron job for borgmatic profile
      file:
        path: "/etc/cron.daily/borgmatic_profile_{{ item.name }}.sh"
        state: absent
      loop: "{{ borgmatic_backups }}"
      no_log: true
      when: item.schedule is not defined or item.schedule != "daily" or not item.enabled

    - name: Enable weekly cron job for borgmatic profile
      template:
        src: run_in_cron.sh
        dest: "/etc/cron.weekly/borgmatic_profile_{{ item.name }}.sh"
        mode: '0755'
        owner: root
        group: root
      no_log: true
      loop: "{{ borgmatic_backups }}"
      when:
        - item.schedule is defined
        - item.schedule == "weekly"
        - item.enabled

    - name: Disable weekly cron job for borgmatic profile
      file:
        path: "/etc/cron.weekly/borgmatic_profile_{{ item.name }}.sh"
        state: absent
      loop: "{{ borgmatic_backups }}"
      no_log: true
      when: item.schedule is not defined or item.schedule != "weekly" or not item.enabled

    - name: Enable monthly cron job for borgmatic profile
      template:
        src: run_in_cron.sh
        dest: "/etc/cron.monthly/borgmatic_profile_{{ item.name }}.sh"
        mode: '0755'
        owner: root
        group: root
      no_log: true
      loop: "{{ borgmatic_backups }}"
      when:
        - item.schedule is defined
        - item.schedule == "monthly"
        - item.enabled

    - name: Disable monthly cron job for borgmatic profile
      file:
        path: "/etc/cron.monthly/borgmatic_profile_{{ item.name }}.sh"
        state: absent
      loop: "{{ borgmatic_backups }}"
      no_log: true
      when: item.schedule is not defined or item.schedule != "monthly" or not item.enabled
