---
- name: Enroll system
  tags:
    - role_enroll
    - untagged
    - enroll
  when:
    - run_role_autobott_enroll
  become: true
  block:
    - name: Set merged autobott_enroll facts
      ansible.builtin.set_fact:
        autobott_enroll_data: "{{ autobott_enroll_defaults | combine(autobott_enroll, recursive=True) }}"
      no_log: true

    - name: Ensure enroll password is set
      ansible.builtin.fail:
        msg: "Value for autobott_enroll_data.passwd is mandatory but is empty"
      when: autobott_enroll_data.passwd | length == 0

    - name: Create system admin group
      ansible.builtin.group:
        name: "{{ autobott_enroll_data.group }}"
        gid: "{{ autobott_enroll_data.gid | default(omit) }}"

    - name: Create system admin user
      ansible.builtin.user:
        name: "{{ autobott_enroll_data.user }}"
        group: "{{ autobott_enroll_data.group }}"
        uid: "{{ autobott_enroll_data.uid | default(omit) }}"
        home: "{{ autobott_enroll_data.home }}"
        password: "{{ autobott_enroll_data.passwd | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
        system: true
        shell: /bin/bash
        create_home: true

    - name: Set authorized SSH keys
      ansible.posix.authorized_key:
        user: "{{ autobott_enroll_data.user }}"
        key: "{{ item }}"
        path: "{{ autobott_enroll_data.home }}/.ssh/authorized_keys"
        manage_dir: true
      loop: "{{ autobott_enroll_data.ssh_keys }}"
      when: autobott_enroll_data.ssh_keys | length > 0

    - name: Revoke SSH keys
      ansible.posix.authorized_key:
        user: "{{ autobott_enroll_data.user }}"
        key: "{{ item }}"
        state: absent
        path: "{{ autobott_enroll_data.home }}/.ssh/authorized_keys"
      loop: "{{ autobott_enroll_data.ssh_keys_revoked }}"
      when: autobott_enroll_data.ssh_keys_revoked | length > 0

    - name: Ensure essential packages are installed
      ansible.builtin.apt:
        name:
          - sudo
          - apt
          - ca-certificates
          - openssh-server
          - openssh-sftp-server
        state: present
        update_cache: true

    - name: Add sudo config for Ansible user
      ansible.builtin.template:
        src: sudoer_ans.j2
        dest: /etc/sudoers.d/ansible-admin-sudo
        owner: root
        group: root
        mode: "0440"
        validate: "visudo -cf %s"

    - name: Remove root password and lock account
      ansible.builtin.shell: |
        passwd -d root && passwd -l root
      args:
        executable: /bin/bash
      changed_when: false

    - name: Set root .bashrc
      ansible.builtin.template:
        src: rootbashrc.j2
        dest: /root/.bashrc
        owner: root
        group: root
        mode: "0600"
      when: autobott_enroll_data.root_bashrc

#============================================================================================================
# Version Control
#============================================================================================================

    - name: Manage Autobott version
      block:
        - name: Check if version file exists
          ansible.builtin.stat:
            path: "/etc/autobott_version"
          register: version_file_stat

        - name: Read current version if file exists
          ansible.builtin.slurp:
            src: "/etc/autobott_version"
          when: version_file_stat.stat.exists
          register: current_version_raw

        - name: Decode current version
          set_fact:
            current_version: "{{ current_version_raw.content | b64decode | trim }}"
          when: version_file_stat.stat.exists

        - name: Extract desired major version
          set_fact:
            desired_major: "{{ (autobot_version.split('.')[0] | regex_replace('[^0-9]', '')) | int }}"

        - name: Extract current major version (only if file exists)
          set_fact:
            current_major: "{{ (current_version.split('.')[0] | regex_replace('[^0-9]', '')) | int }}"
          when: version_file_stat.stat.exists

        - name: Set upgrade validity flag
          set_fact:
            invalid_upgrade: >-
              {{ version_file_stat.stat.exists
                 and (desired_major | int != current_major | int)
                 and (desired_major | int != (current_major | int + 1)) }}

        - name: Autobott execution not viable
          ansible.builtin.debug:
            msg: >
              Invalid upgrade path detected!, Current version: {{ current_version }}; Target version: {{ autobot_version }}
              Rule: Only same-major ({{ current_major | int }}) or next-major ({{ (current_major | int) + 1 }}) upgrades are allowed.
          when: invalid_upgrade | bool
          changed_when: true

        - name: Fail on invalid upgrade
          ansible.builtin.fail:
            msg: "Upgrade blocked due to invalid version transition (see above)."
          when: invalid_upgrade | bool


- name: Write new version to host
  ansible.builtin.copy:
    dest: "/etc/autobott_version"
    content: "{{ autobot_version }}\n"
    owner: root
    group: root
    mode: '0644'
  when:
    - run_role_autobott_enroll | bool
    - run_autobott_write_version | bool
  tags:
    - role_enroll
    - untagged
    - enroll