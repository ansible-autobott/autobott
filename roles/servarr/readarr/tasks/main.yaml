---
#============================================================================================================
# Readarr Role
#============================================================================================================

- name: Main Readarr installation and configuration
  tags:
    - readarr
    - servarr
    - untagged
  when: run_role_readarr | bool
  block:
    - name: Set merged readarr configuration
      ansible.builtin.set_fact:
        readarr_config: "{{ readarr_defaults | combine(readarr, recursive=true) }}"

    - name: Make sure needed packages are installed
      ansible.builtin.apt:
        name:
          - python3-lxml # needed to change xml configs
        state: present
        update_cache: true

    - name: Create readarr system group
      ansible.builtin.group:
        name: "{{ readarr_config.user.group }}"
        gid: "{{ readarr_config.user.gid | default(omit, true) }}"
        state: present

    - name: Create readarr system user
      ansible.builtin.user:
        name: "{{ readarr_config.user.name }}"
        uid: "{{ readarr_config.user.uid | default(omit, true) }}"
        group: "{{ readarr_config.user.group }}"
        home: "{{ readarr_config.paths.base_dir }}"
        create_home: false
        state: present

    - name: Create Readarr directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ readarr_config.user.name }}"
        group: "{{ readarr_config.user.group }}"
      loop:
        - "{{ readarr_config.paths.base_dir }}/install"
        - "{{ readarr_config.paths.data_dir }}"

    - name: Unarchive Readarr release
      ansible.builtin.unarchive:
        src: "{{ readarr_config.download_url }}"
        dest: "{{ readarr_config.paths.base_dir }}/install"
        owner: "{{ readarr_config.user.name }}"
        group: "{{ readarr_config.user.group }}"
        remote_src: true
        creates: "{{ readarr_config.paths.base_dir }}/install/Readarr/LICENSE"

    - name: Ensure correct permissions on Readarr directory
      ansible.builtin.file:
        path: "{{ readarr_config.paths.base_dir }}/install"
        state: directory
        owner: "{{ readarr_config.user.name }}"
        group: "{{ readarr_config.user.group }}"
        recurse: true

    - name: Configure systemd service for Readarr
      ansible.builtin.template:
        src: readarr.service
        dest: /lib/systemd/system/readarr.service
        owner: root
        group: root
        mode: "0644"
        validate: /bin/systemd-analyze verify %s
      notify:
        - reload systemd
        - restart readarr

    - name: Enable and start Readarr  service
      ansible.builtin.systemd:
        name: readarr
        enabled: true
        daemon_reload: true
        state: started
      notify:
        - reload systemd
        - restart readarr

    #============================================================================================================
    # Readarr Configuration
    #============================================================================================================

    - name: Check for existing config.xml
      ansible.builtin.stat:
        path: "{{ readarr_config.paths.data_dir }}/config.xml"
      register: readarr_config_file

    - name: Start Readarr to generate config.xml
      ansible.builtin.service:
        name: readarr
        state: restarted
      when: not readarr_config_file.stat.exists

    - name: Pause to allow Readarr startup and config creation
      ansible.builtin.pause:
        seconds: 10
      when: not readarr_config_file.stat.exists

    - name: Stop Readarr before applying config
      ansible.builtin.service:
        name: readarr
        state: stopped
      when: not readarr_config_file.stat.exists

    - name: Set Readarr bind address in config.xml
      community.general.xml:
        path: "{{ readarr_config.paths.data_dir }}/config.xml"
        xpath: /Config/BindAddress
        value: "{{ readarr_config.service.bind_ip | string }}"
      notify: restart readarr

    - name: Set Readarr port in config.xml
      community.general.xml:
        path: "{{ readarr_config.paths.data_dir }}/config.xml"
        xpath: /Config/Port
        value: "{{ readarr_config.service.port | int }}"
      notify: restart readarr

    - name: Set AuthenticationRequired false in config.xml
      community.general.xml:
        path: "{{ readarr_config.paths.data_dir }}/config.xml"
        xpath: /Config/AuthenticationRequired
        value: "Enabled"
      notify: restart readarr

    - name: Set AuthenticationMethod to in config.xml
      community.general.xml:
        path: "{{ readarr_config.paths.data_dir }}/config.xml"
        xpath: /Config/AuthenticationMethod
        value: "{{ readarr_config.service.auth_method }}"
      notify: restart readarr

    - name: Ensure Readarr is running
      ansible.builtin.service:
        name: readarr
        state: started
